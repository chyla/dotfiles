dotfiles_custom_PS1 () {
    # tool to generate PS1: https://bashrcgenerator.com/
    # [date] hostname directory exit_status$

    if printenv SSH_CONNECTION &> /dev/null ; then
        host=" \h"
    else
        host=""
    fi

    PS1="\[\033[00m\][\t]${host} \[\033[01;34m\]\W\[\033[00m\] \[\033[31m\]\$?\[$(tput -T ansi sgr0)\]$ "
}


dotfiles_init_pyenv () {
    if [ "${PYENV_DIR}x" == "x" ] ; then
        PYENV_DIR="$HOME/.pyenv/bin"
    fi

    if [ -e "${PYENV_DIR}" ] ; then
        PATH="$PYENV_DIR:$PATH"
        eval "$(pyenv virtualenv-init -)"
        eval "$(pyenv init -)"
        eval "$(pyenv init --path)"
    fi
}


dotfiles_dont_write_python_bytecode () {
    export PYTHONDONTWRITEBYTECODE=x
}


dotfiles_history_include_lines_begining_with_space () {
    export HISTCONTROL=
}


dotfiles_history_increase_size () {
    export HISTFILESIZE=5000
    export HISTSIZE=${HISTFILESIZE}
}


dotfiles_func_fixlines () {
    if [[ $# == 0 ]] || [[ "$1" == "--help" ]] || [[ "$1" == "-h" ]] ; then
        cat <<EOF
usage: fixlines [OPTION] [INPUT_FILE]...

  -h, --help   this help message

Change line ending from DOS(CR/LF)/old Mac(CR) to UNIX(LF).
Requires dos2unix to work.
EOF
        return 1
    fi

    if ! command -v dos2unix &> /dev/null ; then
        echo "error: missing dos2unix, please install" >&2
        return 2
    fi

    for file in $* ; do
        output_file="${file}.fixed"

        if [ -e "${output_file}" ] ; then
            echo "Output file exist, skipping: ${output_file}"
        else
            dos2unix -q -c ascii -n "${file}" "${output_file}" && dos2unix -q -c mac -o "${output_file}"
        fi
    done
}


dotfiles_func_md2 () {
    OUTPUT_FORMAT=$1
    INPUT_FILE=$2
    OUTPUT_FILE=$3

    if [ "x$INPUT_FILE" = "x" ] ; then
       echo "no input file" >&2
       return 1
    fi

    if [ "x$OUTPUT_FILE" = "x" ] ; then
       echo "no output file" >&2
       return 1
    fi

    if command -v pandoc &> /dev/null ; then
        pandoc --from=markdown --to="$OUTPUT_FORMAT" --output="$OUTPUT_FILE" "$INPUT_FILE"
    else
        echo "pandoc not found, install with: sudo apt install pandoc"
        return 1
    fi
}


dotfiles_alias_md2docx () {
    alias md2docx='dotfiles_func_md2 docx'
}


dotfiles_alias_md2pdf () {
    alias md2pdf='dotfiles_func_md2 pdf'
}


dotfiles_alias_mk () {
    alias mk='make'
}


dotfiles_alias_e () {
    alias e='emacs -nw'
}


dotfiles_alias_fixlines () {
    alias fixlines='dotfiles_func_fixlines'
}


dotfiles_alias_man () {
    alias ?='man'
}


dotfiles_alias_la () {
    alias la='ls --time-style=long-iso --group-directories-first -hla'
}


dotfiles_alias_ll () {
    alias ll='ls --time-style=long-iso --group-directories-first -hl'
}


dotfiles_alias_sysupgrade () {
    if command -v pkcon &> /dev/null ; then
        alias sysupgrade='sudo -- sh -c "pkcon refresh && pkcon --autoremove update"'
    elif command -v apt-get &> /dev/null ; then
        alias sysupgrade='sudo -- sh -c "apt-get update && apt-get dist-upgrade && apt-get autoremove"'
    else
        alias sysupgrade='echo "No supported package manager found, install packagekit and source dotfiles again."'
    fi
}


dotfiles_alias_cd () {
    alias cd..='cd ..'
}


dotfiles_alias_cls () {
    alias cls='clear'
}


dotfiles_alias_omtt () {
    alias omtt='0install run omtt'
}

dotfiles_alias_rsyncpru () {
    alias rsyncpru='rsync --info=progress2 -h -r -t --update'
}

dotfiles_init_all () {
    dotfiles_custom_PS1
    dotfiles_init_pyenv
    dotfiles_dont_write_python_bytecode

    dotfiles_history_include_lines_begining_with_space
    dotfiles_history_increase_size

    dotfiles_alias_e
    dotfiles_alias_fixlines
    dotfiles_alias_man
    dotfiles_alias_md2docx
    dotfiles_alias_md2pdf
    dotfiles_alias_mk
    dotfiles_alias_la
    dotfiles_alias_ll
    dotfiles_alias_sysupgrade
    dotfiles_alias_cd
    dotfiles_alias_cls
    dotfiles_alias_rsyncpru
    dotfiles_alias_omtt
}
